# Project analysis configuration for SonarQube

# ** MANDATORY PARAMETERS **
# --------------------------
# Search for source codes from the top directory and all the subdirectories. Comma-
# separated paths to directories containing source files. Compatible with Maven. If not
# set, the source code is retrieved from the default Maven source code location.
sonar.sources=.

# ** EXCLUSIONS & INCLISIONS **
# -----------------------------
# Comma-separated paths to directories containing tests.
# Not compatible with Maven, which retrieves test from the default location for Java
# Maven projects.
# sonar.tests=

# Comma-delimited list of file path patterns to be excluded from analysis.
# Do not analyse 3rd party content under subdirectories from-github and opensource
sonar.exclusions=**/sphinxdocs/*

# Comma-delimited list of file path patterns to be excluded from coverage calculations
# sonar.coverage.exclusions=

# Comma-delimited list of test file path patterns to be excluded from analysis.
# sonar.test.exclusions=

# Comma-delimited list of file path patterns to be included in analysis. When set, only
# files matching the paths set here will be included in analysis.
# sonar.inclusions=

# Comma-delimited list of test file path patterns to be included in analysis. When set,
# only test files matching the paths set here will be included in analysis.
# sonar.test.inclusions=

# Files containing text matching this regular expression will be ignored by analysis.
# sonar.issue.ignore.allfile=

# If set to true, all files are imported - with respect to inclusions and exclusions,
# even if there is no matching language plugin installed.
# sonar.import_unknown_files=            # default=false

# Comma-delimited list of file path patterns to be excluded from duplication detection
# sonar.cpd.exclusions=

# ** DUPLICATIONS **
# ------------------
# A piece of code is considered duplicated as soon as there are at least 100 duplicated
# tokens in a row (overide with sonar.cpd.${language}.minimumTokens) spread on at least
# 10 lines of code (override with sonar.cpd.${language}.minimumLines).
# sonar.cpd.${language}.minimumtokens=   # default=100
# sonar.cpd.${language}.minimumLines=    # default=10

# ** ANALYSIS LOGGING **
# ----------------------
# Control the quantity / level of logs produced during an analysis.
# * INFO:  Display INFO logs
# * DEBUG: Display INFO logs + more details at DEBUG level. Similar to sonar.verbose=true
# * TRACE: Display DEBUG logs + the timings of all ElasticSearch queries and Web API calls
#          executed by the SonarQube Scanner.
# sonar.log.level=                       # default=INFO

# Add more detail to both client and server-side analysis logs.
#   * Activates DEBUG mode for the scanner. This is a shortcut of sonar.log.level=DEBUG.
#   * Adds client-side environment variables and system properties to server-side log of
#     analysis report processing.
# NOTE! There is the potential for this setting to expose sensitive information such as
#        passwords if they are stored as server-side environment variables.
# sonar.verbose=                         # default=false

# Display logs to see where the analyzer spends time.
# This parameter is generating a file containing these timing infos in
# <workingDir>/profiling/<moduleKey>-profiler.xml where <workingDir> is:
#   * .sonar/profiling/ when analysis is run with Sonar Scanner
#   * target/sonar/profiling/ when Maven is used
# sonar. showProfiling=                  # default=false

# Outputs to the specified file the full list of properties passed to the scanner API as
# a means to debug analysis.
# sonar.scanner.dumpToFile=
